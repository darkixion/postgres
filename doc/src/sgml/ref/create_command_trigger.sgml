<!--
doc/src/sgml/ref/create_trigger.sgml
PostgreSQL documentation
-->

<refentry id="SQL-CREATETRIGGER">
 <refmeta>
  <refentrytitle>CREATE COMMAND TRIGGER</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>CREATE COMMAND TRIGGER</refname>
  <refpurpose>define a new trigger</refpurpose>
 </refnamediv>

 <indexterm zone="sql-createcommandtrigger">
  <primary>CREATE COMMAND TRIGGER</primary>
 </indexterm>

 <refsynopsisdiv>
<synopsis>
CREATE TRIGGER <replaceable class="PARAMETER">name</replaceable> { BEFORE | AFTER  } ANY COMMAND
    EXECUTE PROCEDURE <replaceable class="PARAMETER">function_name</replaceable> ()

CREATE TRIGGER <replaceable class="PARAMETER">name</replaceable> { BEFORE | AFTER  } COMMAND <replaceable class="PARAMETER">command</replaceable> [, ... ]
    EXECUTE PROCEDURE <replaceable class="PARAMETER">function_name</replaceable> ()

<phrase>where <replaceable class="parameter">command</replaceable> can be one of:</phrase>

    CREATE SCHEMA
    CREATE EXTENSION
    CREATE FUNCTION
    CREATE TABLE
    CREATE FOREIGN TABLE
    CREATE INDEX
    CREATE SEQUENCE
    CREATE VIEW
    CREATE AGGREGATE
    CREATE OPERATOR
    CREATE COLLATION
    CREATE TEXT SEARCH PARSER
    CREATE TEXT SEARCH DICTIONARY
    CREATE TEXT SEARCH TEMPLATE
    CREATE TEXT SEARCH CONFIGURATION
    CREATE TYPE
    CREATE DOMAIN
    ALTER TABLE
    ALTER SCHEMA
    ALTER EXTENSION
    ALTER FUNCTION
    ALTER TABLE
    ALTER AGGREGATE
    ALTER OPERATOR
    ALTER COLLATION
    ALTER TEXT_P SEARCH PARSER
    ALTER TEXT_P SEARCH DICTIONARY
    ALTER TEXT_P SEARCH TEMPLATE
    ALTER TEXT_P SEARCH CONFIGURATION
    ALTER TYPE_P
    ALTER DOMAIN_P
    ALTER TRIGGER
    DROP TABLE
    DROP SEQUENCE
    DROP VIEW
    DROP INDEX
    DROP FOREIGN TABLE
    DROP TYPE
    DROP DOMAIN
    DROP COLLATION
    DROP CONVERSION
    DROP SCHEMA
    DROP EXTENSION
    DROP TEXT SEARCH PARSER
    DROP TEXT SEARCH DICTIONARY
    DROP TEXT SEARCH TEMPLATE
    DROP TEXT SEARCH CONFIGURATION
    DROP LANGUAGE
    DROP FOREIGN DATA WRAPPER
    DROP SERVER
    DROP TRIGGER
    DROP ASSERTION
    DROP OPERATOR CLASS
    DROP OPERATOR FAMILY
    DROP FUNCTION
    DROP AGGREGATE
    DROP OPERATOR
    DROP CAST
    DROP RULE
    VACUUM
	
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>CREATE COMMAND TRIGGER</command> creates a new command trigger.
   The trigger will be associated with the specified command and will
   execute the specified
   function <replaceable class="parameter">function_name</replaceable> when
   that command is run.
  </para>

  <para>
   The command trigger can be specified to fire before or after the command
   is executed. A command trigger's function must
   return <literal>void</literal>, the only it can aborts the execution of
   the command is by raising an exception.
  </para>

  <para>
   Refer to <xref linkend="triggers"> for more information about triggers.
  </para>
 </refsect1>

 <refsect1>
  <title>Parameters</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      The name to give the new trigger.  This must be distinct from
      the name of any other trigger for the same table.
      The name cannot be schema-qualified &mdash; the trigger inherits the
      schema of its table.  For a constraint trigger, this is also the name to
      use when modifying the trigger's behavior using
      <command>SET CONSTRAINTS</>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><literal>BEFORE</literal></term>
    <term><literal>AFTER</literal></term>
    <listitem>
     <para>
      Determines whether the function is called before or after the command
      is executed.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">command</replaceable></term>
    <listitem>
     <para>
      The tag of the command the trigger is for.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">function_name</replaceable></term>
    <listitem>
     <para>
      A user-supplied function that is declared as taking 5 arguments of
      type text, text, oid, text, text and returning void.
     </para>
     <para>
      If your command trigger is implemented in <literal>C</literal> then it
      will be called with yet another argument, of
      type <literal>internal</literal>, which is a pointer to
      the <literal>Node *</literal> parse tree.
     </para>
     <para>
      The command trigger function is called with the
      parameters <literal>tg_when</literal> (which is set to either 'BEFORE'
      or 'AFTER'), <literal>command
      tag</literal>, <literal>objectid</literal> (can be null in case of a
      BEFORE CREATE or an AFTER DROP command trigger
      timing), <literal>schemaname</literal> (can be null for objects not
      living in a schema, and for sequences due to an implementation limit)
      and <literal>object name</literal> (can be null for any command
      triggers).
     </para>
    </listitem>
   </varlistentry>

  </variablelist>
 </refsect1>

 <refsect1 id="SQL-CREATECOMMANDTRIGGER-notes">
  <title>Notes</title>

  <para>
   To create a trigger on a command, the user must be superuser.
  </para>

  <para>
   Use <xref linkend="sql-dropcommandtrigger"> to remove a command trigger.
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATECOMMANDTRIGGER-examples">
  <title>Examples</title>

   Forbids the execution of any DDL command:

<programlisting>
CREATE OR REPLACE FUNCTION abort_any_command
 (tg_when text, cmd_tag text, objectid oid, schemaname text, objectname text)
 RETURNS void LANGUAGE plpgsql AS $$
BEGIN
  RAISE EXCEPTION 'command % is disabled' % cmd_tag;
END;
$$;

CREATE TRIGGER abort_ddl
        BEFORE COMMAND CREATE TABLE
       EXECUTE PROCEDURE abort_any_command();
</programlisting>

   Execute the function <function>enforce_local_style</> each time
   a <literal>CREATE TABLE</literal> command is run:

<programlisting>
CREATE OR REPLACE FUNCTION enforce_local_style
 (tg_when text, cmd_tag text, objectid oid, schemaname text, objectname text)
 RETURNS bool LANGUAGE plpgsql AS $$
BEGIN
  IF substring(objectname, 0, 4) NOT IN ('ab_', 'cz_', 'fr_')
  THEN
    RAISE EXCEPTION 'invalid relation name: %', objectname;
  END IF;
END;
$$;

CREATE TRIGGER check_style
        BEFORE COMMAND CREATE TABLE
       EXECUTE PROCEDURE enforce_local_style();
</programlisting>
  </para>
 </refsect1>

 <refsect1 id="SQL-CREATECOMMANDTRIGGER-compatibility">
  <title>Compatibility</title>

  <para>
   <command>CREATE COMMAND TRIGGER</command> is a
   <productname>PostgreSQL</productname> extension of the <acronym>SQL</>
   standard.
  </para>

 </refsect1>

 <refsect1>
  <title>See Also</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createfunction"></member>
   <member><xref linkend="sql-altercommandtrigger"></member>
   <member><xref linkend="sql-dropcommandtrigger"></member>
  </simplelist>
 </refsect1>
</refentry>
